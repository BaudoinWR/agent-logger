/**
 * Paquet de d√©finition
 **/
package fr.woorib.tools.jdbc.instrument;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Map;

/**
 * Description: Merci de donner une description du service rendu par cette classe
 **/
public class StatementWrapper implements Statement {
  Statement wrapped;
  String statement;
  Map<Integer, Object> map = new HashMap<Integer, Object>();
  long duration = 0;

  public StatementWrapper(Statement wrapped) {
    this.wrapped = wrapped;
  }

  public ResultSet executeQuery(String sql) throws SQLException {
    this.statement = sql;
    return new ResultSetWrapper(wrapped.executeQuery(sql), sql, map);
  }

  public int executeUpdate(String sql) throws SQLException {
    this.statement = sql;
    return wrapped.executeUpdate(sql);
  }

  public void close() throws SQLException {
    System.err.println(this.toString());
    wrapped.close();
  }

  public int getMaxFieldSize() throws SQLException {
    return wrapped.getMaxFieldSize();
  }

  public void setMaxFieldSize(int max) throws SQLException {
    wrapped.setMaxFieldSize(max);
  }

  public int getMaxRows() throws SQLException {
    return wrapped.getMaxRows();
  }

  public void setMaxRows(int max) throws SQLException {
    wrapped.setMaxRows(max);
  }

  public void setEscapeProcessing(boolean enable) throws SQLException {
    wrapped.setEscapeProcessing(enable);
  }

  public int getQueryTimeout() throws SQLException {
    return wrapped.getQueryTimeout();
  }

  public void setQueryTimeout(int seconds) throws SQLException {
    wrapped.setQueryTimeout(seconds);
  }

  public void cancel() throws SQLException {
    wrapped.cancel();
  }

  public SQLWarning getWarnings() throws SQLException {
    return wrapped.getWarnings();
  }

  public void clearWarnings() throws SQLException {
    wrapped.clearWarnings();
  }

  public void setCursorName(String name) throws SQLException {
    wrapped.setCursorName(name);
  }

  public boolean execute(String sql) throws SQLException {
    return wrapped.execute(sql);
  }

  public ResultSet getResultSet() throws SQLException {
    return wrapped.getResultSet();
  }

  public int getUpdateCount() throws SQLException {
    return wrapped.getUpdateCount();
  }

  public boolean getMoreResults() throws SQLException {
    return wrapped.getMoreResults();
  }

  public void setFetchDirection(int direction) throws SQLException {
    wrapped.setFetchDirection(direction);
  }

  public int getFetchDirection() throws SQLException {
    return wrapped.getFetchDirection();
  }

  public void setFetchSize(int rows) throws SQLException {
    wrapped.setFetchSize(rows);
  }

  public int getFetchSize() throws SQLException {
    return wrapped.getFetchSize();
  }

  public int getResultSetConcurrency() throws SQLException {
    return wrapped.getResultSetConcurrency();
  }

  public int getResultSetType() throws SQLException {
    return wrapped.getResultSetType();
  }

  public void addBatch(String sql) throws SQLException {
    wrapped.addBatch(sql);
  }

  public void clearBatch() throws SQLException {
    wrapped.clearBatch();
  }

  public int[] executeBatch() throws SQLException {
    return wrapped.executeBatch();
  }

  public Connection getConnection() throws SQLException {
    return wrapped.getConnection();
  }

  public boolean getMoreResults(int current) throws SQLException {
    return wrapped.getMoreResults(current);
  }

  public ResultSet getGeneratedKeys() throws SQLException {
    return wrapped.getGeneratedKeys();
  }

  public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
    this.statement = sql;
    return wrapped.executeUpdate(sql, autoGeneratedKeys);
  }

  public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
    this.statement = sql;
    return wrapped.executeUpdate(sql, columnIndexes);
  }

  public int executeUpdate(String sql, String[] columnNames) throws SQLException {
    this.statement = sql;
    return wrapped.executeUpdate(sql, columnNames);
  }

  public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
    this.statement = sql;
    return wrapped.execute(sql, autoGeneratedKeys);
  }

  public boolean execute(String sql, int[] columnIndexes) throws SQLException {
    this.statement = sql;
    return wrapped.execute(sql, columnIndexes);
  }

  public boolean execute(String sql, String[] columnNames) throws SQLException {
    this.statement = sql;
    return wrapped.execute(sql, columnNames);
  }

  public int getResultSetHoldability() throws SQLException {
    return wrapped.getResultSetHoldability();
  }

  public boolean isClosed() throws SQLException {
    return wrapped.isClosed();
  }

  public void setPoolable(boolean poolable) throws SQLException {
    wrapped.setPoolable(poolable);
  }

  public boolean isPoolable() throws SQLException {
    return wrapped.isPoolable();
  }

  public <T> T unwrap(Class<T> iface) throws SQLException {
    return wrapped.unwrap(iface);
  }

  public boolean isWrapperFor(Class<?> iface) throws SQLException {
    return wrapped.isWrapperFor(iface);
  }

  @Override
  public boolean isCloseOnCompletion() throws SQLException {
    return wrapped.isCloseOnCompletion();
  }

  @Override
  public void closeOnCompletion() throws SQLException {
    wrapped.closeOnCompletion();
  }

  @Override
  public String toString() {
    String s = "prepared_statement_closed{" +
      "statement='" + statement + "'" +
      ", parameters=" + map +
      ", duration=" + duration +
      "}";
    return s;
  }
}
 
